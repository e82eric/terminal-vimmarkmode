// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

#include "precomp.h"
#include "inc/CodepointWidthDetector.hpp"

// I was trying to minimize dependencies in this code so that it's easier to port to other terminal applications.
// That's why it doesn't use any of the GSL helpers and makes minimal use of the STL.
#pragma warning(disable : 26446) // Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
#pragma warning(disable : 26472) // Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).

// On top of that, this code is optimized for processing input as fast as possible, so it's a little low-level.
#pragma warning(disable : 26438) // Avoid 'goto' (es.76).
#pragma warning(disable : 26481) // Don't use pointer arithmetic. Use span instead (bounds.1).
#pragma warning(disable : 26482) // Only index into arrays using constant expressions (bounds.2).

// s_stage1/2/3/4 represents a multi-stage table, aka trie.
// The highest bits of the codepoint are an index into s_stage1, which selects a row in s_stage2.
// The next couple bits of the codepoint then select the column in that row.
// This continues until the last stage which contains the final value.
//
// Fundamentally, the trie is generated by taking all 1114112 codepoints and their assigned values and deduplicating
// chunks of e.g. 16 values each. Each deduplicated chunk is assigned its offset in the list of all deduplicated chunks.
// This results in two lists: 1114112/16=7132 IDs and however many deduplicated chunks you have accumulated.
// This is often called a two-stage table.
//
// If you want to look up the value now, you'll first find the deduplicated chunk offset via `offsets[codepoint / 16]`.
// This gives you the location of your chunk. Now you just look up the value with `values[offset + (codepoint & 15)]`.
//
// Since the 7132 offsets take up a lot more space than the deduplicated values (at least in case of the Unicode database),
// this process can be repeated by compressing the offset array the exact same way the values got compressed and so on.

// s_joinRules represents the UAX #29 extended grapheme cluster rules, however slightly modified to fit our needs.
// Specifically, UAX #29 states:
// > Note: Testing two adjacent characters is insufficient for determining a boundary.
//
// I completely agree, but I really hate it. So this code trades off correctness for simplicity
// by using a simple lookup table anyway. Under most circumstances users won't notice,
// because as far as I can see this only behaves different for degenerate ("invalid") Unicode.
// It reduces our code complexity significantly and is way *way* faster.
//
// This is a great reference for the s_joinRules table:
//   https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html

// Generated by GraphemeTableGen
// on 2024-05-31T21:13:48Z, from Unicode 15.1.0, 8479 bytes
// clang-format off
static constexpr uint16_t s_stage0[] = {
    0x0000, 0x0020, 0x0040, 0x0060, 0x0080, 0x009f, 0x00bf, 0x00ca, 0x00ca, 0x00d3, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca,
    0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00eb, 0x010b, 0x011d, 0x0121, 0x011e, 0x011b, 0x0126, 0x0146, 0x0166, 0x0166, 0x0166, 0x0182,
    0x01a2, 0x01ba, 0x01da, 0x01fa, 0x0146, 0x0146, 0x0218, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x022d, 0x00ca, 0x00ca,
    0x024d, 0x026d, 0x0146, 0x0146, 0x0146, 0x0282, 0x02a2, 0x02b0, 0x0146, 0x02c3, 0x02e1, 0x02f9, 0x0319, 0x0336, 0x0356, 0x0376,
    0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca,
    0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x0396,
    0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca,
    0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x0396,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x03b6, 0x03be, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166,
    0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x03de,
    0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166,
    0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x03de,
};
static constexpr uint16_t s_stage1[] = {
    0x0000, 0x0004, 0x000c, 0x0014, 0x001c, 0x0024, 0x002a, 0x0031, 0x002a, 0x0037, 0x002a, 0x003f, 0x0047, 0x0049, 0x004f, 0x0057, 0x005f, 0x0065, 0x006d, 0x002a, 0x002a, 0x002a, 0x0073, 0x007b, 0x0083, 0x008a, 0x002a, 0x0091, 0x0098, 0x009f, 0x00a3, 0x00aa,
    0x00b2, 0x00b8, 0x00be, 0x00c5, 0x00cd, 0x00d5, 0x00dd, 0x00e5, 0x00ed, 0x00f5, 0x00fd, 0x0105, 0x00fd, 0x010d, 0x0115, 0x011d, 0x0125, 0x012d, 0x00ed, 0x0135, 0x013d, 0x0145, 0x014d, 0x0154, 0x015b, 0x0163, 0x0165, 0x016d, 0x0172, 0x006f, 0x017a, 0x0182,
    0x0185, 0x018d, 0x0195, 0x002a, 0x019d, 0x01a1, 0x01a5, 0x01aa, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x01b2, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x01b8, 0x01bf, 0x01c6, 0x01cd,
    0x01d4, 0x002a, 0x01dc, 0x002a, 0x01e2, 0x002a, 0x002a, 0x002a, 0x01ea, 0x01f0, 0x01f8, 0x01ff, 0x0207, 0x020f, 0x0217, 0x021d, 0x0224, 0x002a, 0x002a, 0x022b, 0x002a, 0x002a, 0x002a, 0x0047, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x0233, 0x023b, 0x0243, 0x0249, 0x0251, 0x0259, 0x0261, 0x0269, 0x0271, 0x0279, 0x0281, 0x002a, 0x0289, 0x002a, 0x0290, 0x0297, 0x002a, 0x029f, 0x02a3, 0x02ab, 0x002a, 0x002a, 0x02b3, 0x02bb, 0x02c3, 0x02cb, 0x02d3, 0x02db, 0x02e3, 0x02eb, 0x02f3, 0x002a,
    0x002a, 0x002a, 0x002a, 0x02fb, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x0303, 0x0309, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x030d, 0x002a, 0x0314, 0x002a, 0x0043, 0x002a, 0x002a, 0x031c, 0x0320, 0x0328, 0x0328, 0x0328, 0x032e, 0x0334,
    0x033c, 0x0342, 0x0328, 0x034a, 0x0328, 0x0351, 0x0355, 0x035b, 0x0362, 0x0368, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328,
    0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x002a, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x036f, 0x0377, 0x002a,
    0x002a, 0x002a, 0x002a, 0x002a, 0x037a, 0x0382, 0x016f, 0x002a, 0x002a, 0x002a, 0x002a, 0x038a, 0x002a, 0x0392, 0x039a, 0x03a2, 0x03aa, 0x03b2, 0x03ba, 0x03bf, 0x03c7, 0x03cf, 0x03d7, 0x002a, 0x002a, 0x002a, 0x03de, 0x03e6, 0x03e7, 0x03e8, 0x03e9, 0x03ea,
    0x03eb, 0x03ec, 0x03e6, 0x03e7, 0x03e8, 0x03e9, 0x03ea, 0x03eb, 0x03ec, 0x03e6, 0x03e7, 0x03e8, 0x03e9, 0x03ea, 0x03eb, 0x03ec, 0x03e6, 0x03e7, 0x03e8, 0x03e9, 0x03ea, 0x03eb, 0x03ec, 0x03e6, 0x03e7, 0x03e8, 0x03e9, 0x03ea, 0x03eb, 0x03ec, 0x03e6, 0x03e7,
    0x03e8, 0x03e9, 0x03ea, 0x03eb, 0x03f3, 0x03fb, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3,
    0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0403, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x040b, 0x0411, 0x002a, 0x0417, 0x033c, 0x041f,
    0x0424, 0x0428, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x0430, 0x002a, 0x002a, 0x002a, 0x0438, 0x002a, 0x043d, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x0445, 0x002a, 0x002a, 0x01d8, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x044d, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x0452, 0x0458, 0x002a, 0x00a7, 0x0460, 0x002a, 0x0468, 0x0470, 0x0478, 0x0480, 0x0488, 0x0490,
    0x0498, 0x04a0, 0x04a3, 0x04ab, 0x002a, 0x04b0, 0x04b8, 0x04c0, 0x002a, 0x002a, 0x04c7, 0x04cf, 0x01f8, 0x04d7, 0x002a, 0x002a, 0x04da, 0x04e2, 0x01f8, 0x04ea, 0x04ed, 0x002a, 0x04f4, 0x002a, 0x002a, 0x002a, 0x04fa, 0x002a, 0x002a, 0x002a, 0x0502, 0x050a,
    0x002a, 0x0510, 0x0518, 0x0520, 0x0528, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x052c, 0x002a, 0x0534, 0x002a, 0x053b, 0x0543, 0x054a, 0x002a, 0x002a, 0x002a, 0x002a, 0x054d, 0x0555, 0x055d, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x055f, 0x0567, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x0201, 0x056a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x0571, 0x0578, 0x057c, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328,
    0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0584, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328,
    0x058c, 0x0594, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x0596, 0x0328, 0x0328, 0x0328, 0x0328, 0x059e, 0x05a5, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x05ab, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x05b3, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x05bb,
    0x05c3, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x05c7, 0x05cf, 0x002a, 0x002a, 0x05d7, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x05df, 0x05e7, 0x05ef, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x05f7, 0x002a, 0x05fe, 0x002a, 0x056a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x002a, 0x0601, 0x0607, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x0607, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x060d, 0x002a, 0x0615, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x061d, 0x061e, 0x061e, 0x0625, 0x062d, 0x0633, 0x063b, 0x0641, 0x0649, 0x0651,
    0x061e, 0x061e, 0x0659, 0x0660, 0x0668, 0x066f, 0x0677, 0x067f, 0x0680, 0x0681, 0x0689, 0x0691, 0x0699, 0x069e, 0x0680, 0x06a6, 0x0680, 0x06ae, 0x002a, 0x06b6, 0x002a, 0x06be, 0x06c6, 0x06cd, 0x06d4, 0x061e, 0x06dc, 0x06e4, 0x0680, 0x0680, 0x061e, 0x06ec,
    0x06f4, 0x06fc, 0x002a, 0x002a, 0x002a, 0x002a, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x0704, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328,
    0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0329, 0x070c, 0x0047, 0x0714, 0x0714, 0x0047, 0x0047, 0x0047, 0x071c, 0x0714, 0x0714,
    0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x02a3, 0x02a3,
    0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x0724,
};
static constexpr uint16_t s_stage2[] = {
    0x0000, 0x0000, 0x0000, 0x0000, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0011, 0x0018, 0x0020, 0x0022, 0x002a, 0x0008, 0x0029, 0x0030,
    0x0036, 0x003e, 0x0040, 0x0047, 0x004c, 0x0008, 0x004a, 0x002d,
    0x004e, 0x002d, 0x0053, 0x0029, 0x005b, 0x0063, 0x0034, 0x0008,
    0x004e, 0x002d, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x002a, 0x006b, 0x0049, 0x0008, 0x0008, 0x0008,
    0x0008, 0x004c, 0x0008, 0x004c, 0x0008, 0x0008, 0x0008, 0x0072,
    0x005a, 0x0079, 0x0081, 0x0008, 0x0008, 0x0008, 0x0008, 0x0089,
    0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0008,
    0x0008, 0x0091, 0x0092, 0x0098, 0x0028, 0x0091, 0x0092, 0x0098,
    0x0028, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x004c,
    0x0008, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092, 0x004c,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a0, 0x00a6, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00ad, 0x0089, 0x0089,
    0x0089, 0x0089, 0x00af, 0x00b5, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00bd, 0x0008, 0x0089, 0x00c5, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00a0, 0x0089, 0x0089, 0x0008, 0x0008,
    0x00cd, 0x0008, 0x0008, 0x00a8, 0x00d5, 0x00dc, 0x00e3, 0x0008,
    0x0008, 0x00e9, 0x00cc, 0x0008, 0x0008, 0x0008, 0x0089, 0x0089,
    0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a8,
    0x0089, 0x00cd, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a0,
    0x00a4, 0x00f1, 0x0008, 0x0008, 0x00a8, 0x00f9, 0x00fd, 0x00a2,
    0x0008, 0x0008, 0x0008, 0x0101, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0109, 0x0089, 0x0008, 0x0008, 0x0008, 0x0008, 0x00ac, 0x0089,
    0x0089, 0x0111, 0x0089, 0x0089, 0x0089, 0x00a4, 0x0008, 0x0119,
    0x011e, 0x011e, 0x011e, 0x011e, 0x0124, 0x0089, 0x012a, 0x00ad,
    0x011e, 0x0132, 0x0008, 0x0008, 0x011e, 0x0101, 0x0008, 0x0119,
    0x011e, 0x011e, 0x013a, 0x0141, 0x0147, 0x00dc, 0x014e, 0x00ce,
    0x0154, 0x0132, 0x0008, 0x015b, 0x015d, 0x0101, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x015f, 0x0165, 0x016c, 0x00cc,
    0x0008, 0x0008, 0x0008, 0x0170, 0x0008, 0x0101, 0x0008, 0x0119,
    0x011e, 0x011e, 0x013a, 0x0178, 0x0147, 0x00af, 0x0180, 0x0008,
    0x0008, 0x0132, 0x0008, 0x0008, 0x0187, 0x00dc, 0x014e, 0x00a9,
    0x0154, 0x0132, 0x0008, 0x018f, 0x0008, 0x00cb, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00a8, 0x0197, 0x00e3, 0x00ce,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a3, 0x0008, 0x0119,
    0x011e, 0x011e, 0x013a, 0x011e, 0x0147, 0x00b0, 0x019e, 0x01a4,
    0x01ac, 0x0132, 0x0008, 0x0008, 0x0008, 0x00b0, 0x00e3, 0x01a4,
    0x0008, 0x0132, 0x0008, 0x00ca, 0x0008, 0x00a4, 0x0008, 0x0119,
    0x011e, 0x011e, 0x011e, 0x011e, 0x017d, 0x00b0, 0x01b4, 0x00ce,
    0x0008, 0x0132, 0x0008, 0x0008, 0x0008, 0x0101, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x01bb, 0x01c2, 0x0089,
    0x0008, 0x0008, 0x0132, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x01c7, 0x00a5, 0x00ce, 0x008a, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x01c7, 0x00a3, 0x0008, 0x008a, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a6, 0x0008, 0x0008,
    0x015e, 0x01bc, 0x00b0, 0x00a9, 0x0089, 0x00ad, 0x0089, 0x0089,
    0x0089, 0x00a3, 0x015d, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x01cf, 0x0089, 0x01d3, 0x0008, 0x0008, 0x00a8,
    0x01d8, 0x01df, 0x01e6, 0x00e4, 0x0008, 0x01ec, 0x01f3, 0x0008,
    0x01fb, 0x0008, 0x0008, 0x0008, 0x0008, 0x0203, 0x0203, 0x0203,
    0x0203, 0x0203, 0x0203, 0x0203, 0x0203, 0x020b, 0x020b, 0x020b,
    0x020b, 0x020b, 0x0213, 0x0213, 0x0213, 0x0213, 0x0213, 0x0213,
    0x0213, 0x0213, 0x0008, 0x0008, 0x0008, 0x00a9, 0x0008, 0x0008,
    0x0008, 0x0008, 0x021b, 0x0008, 0x0008, 0x0008, 0x016d, 0x0008,
    0x0008, 0x0132, 0x0008, 0x0008, 0x0008, 0x0132, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00aa, 0x0089, 0x0089, 0x00a4,
    0x00f1, 0x0008, 0x0008, 0x0008, 0x0008, 0x0221, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x01a4, 0x0008, 0x0008, 0x0008,
    0x0008, 0x00cc, 0x0008, 0x0008, 0x0008, 0x0008, 0x0089, 0x00a4,
    0x0089, 0x00a4, 0x0008, 0x0008, 0x00ce, 0x00a4, 0x0008, 0x0008,
    0x0008, 0x0008, 0x00a9, 0x008a, 0x0228, 0x0089, 0x0089, 0x00dc,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0089, 0x0089,
    0x008a, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a3,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00aa, 0x0089, 0x00a3,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00a0, 0x00a4, 0x0008, 0x00a5,
    0x0008, 0x0008, 0x0008, 0x00ad, 0x01d4, 0x0008, 0x0008, 0x0008,
    0x0008, 0x00a8, 0x0089, 0x00a4, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00aa, 0x0089, 0x0089, 0x0008, 0x0008, 0x0126, 0x0089, 0x0089,
    0x0167, 0x00f2, 0x00a6, 0x0008, 0x0230, 0x0238, 0x023d, 0x0022,
    0x0245, 0x024d, 0x0253, 0x0008, 0x025a, 0x0008, 0x0008, 0x0262,
    0x0268, 0x002c, 0x007a, 0x0025, 0x0008, 0x0008, 0x0008, 0x0008,
    0x002c, 0x0008, 0x0008, 0x0089, 0x0089, 0x0089, 0x0089, 0x00cd,
    0x0008, 0x0270, 0x004c, 0x0073, 0x0008, 0x0277, 0x002d, 0x0008,
    0x025a, 0x0008, 0x0008, 0x0033, 0x0060, 0x0092, 0x0026, 0x0092,
    0x0028, 0x0008, 0x004c, 0x027f, 0x0285, 0x0008, 0x028c, 0x0008,
    0x0028, 0x0008, 0x0008, 0x0292, 0x0008, 0x007a, 0x0008, 0x0008,
    0x0008, 0x0040, 0x029a, 0x0295, 0x029f, 0x0068, 0x02a4, 0x007d,
    0x0032, 0x0008, 0x02aa, 0x002e, 0x0008, 0x02b2, 0x02b0, 0x0008,
    0x0008, 0x02b0, 0x0008, 0x002b, 0x004c, 0x002b, 0x0008, 0x0008,
    0x007a, 0x0008, 0x0008, 0x002e, 0x02ba, 0x0008, 0x02c2, 0x0008,
    0x0008, 0x02ca, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x02cb, 0x0008, 0x0008, 0x0008, 0x02d3, 0x02db, 0x02e3, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092,
    0x0092, 0x0092, 0x0092, 0x02eb, 0x0092, 0x0092, 0x0092, 0x0092,
    0x0098, 0x0092, 0x0092, 0x0008, 0x0008, 0x0008, 0x0008, 0x0098,
    0x02f1, 0x02f7, 0x0032, 0x02fd, 0x0304, 0x0028, 0x0008, 0x0239,
    0x007a, 0x0008, 0x030c, 0x0314, 0x031b, 0x0323, 0x0329, 0x0330,
    0x0330, 0x0330, 0x0330, 0x032d, 0x0338, 0x033c, 0x0330, 0x0344,
    0x0347, 0x0330, 0x0331, 0x034f, 0x0008, 0x0357, 0x035b, 0x0359,
    0x0363, 0x0330, 0x0367, 0x0368, 0x036e, 0x0370, 0x0375, 0x034b,
    0x0372, 0x037b, 0x0381, 0x0389, 0x0363, 0x0391, 0x02c5, 0x025a,
    0x0399, 0x028a, 0x002b, 0x039d, 0x03a5, 0x03ac, 0x0008, 0x03b4,
    0x0008, 0x004e, 0x0092, 0x0008, 0x0008, 0x03bc, 0x0008, 0x025a,
    0x0008, 0x0399, 0x03c4, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0289, 0x0008, 0x03cc, 0x0008, 0x0008, 0x03d4, 0x0008,
    0x0008, 0x0008, 0x0008, 0x03d8, 0x0028, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x00ce, 0x00a6, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00ce, 0x03e0, 0x03e0, 0x03e0, 0x03e6,
    0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03ea, 0x0008,
    0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03f2, 0x0008, 0x0008, 0x0008, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03e0, 0x03fa, 0x0402, 0x0405, 0x040c, 0x03e0, 0x03e0, 0x03e0,
    0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e1, 0x0414, 0x03e0, 0x03e0,
    0x03e0, 0x03e0, 0x041c, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x040c, 0x03e0, 0x03e1, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03e0, 0x03ea, 0x0424, 0x03e0, 0x03e0, 0x03e0, 0x03e1, 0x03e0,
    0x03e0, 0x03e0, 0x03e0, 0x0092, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03e0, 0x03e0, 0x0403, 0x042b, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03e9, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e1,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00ce,
    0x0126, 0x01d4, 0x0008, 0x0008, 0x0008, 0x00a8, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0433, 0x00ca, 0x0008, 0x0008, 0x00a0, 0x043a,
    0x0008, 0x0008, 0x00a6, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00aa, 0x0089, 0x01d4, 0x0008, 0x0008, 0x0008, 0x0089, 0x0089,
    0x00a6, 0x00ce, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a8, 0x01d4,
    0x0008, 0x0008, 0x00ce, 0x0089, 0x00a4, 0x0008, 0x0203, 0x0203,
    0x0203, 0x0442, 0x00a4, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00a0, 0x0089, 0x00cd, 0x0008, 0x0008, 0x0008, 0x00f1, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00ad, 0x008a, 0x0008, 0x00ca,
    0x0447, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x044d, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0455, 0x045c, 0x00cc,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00a0, 0x01a4, 0x0008, 0x0008,
    0x0008, 0x0008, 0x00a0, 0x0462, 0x0008, 0x0008, 0x046a, 0x046b,
    0x046b, 0x046f, 0x046b, 0x046b, 0x046b, 0x046a, 0x046b, 0x046b,
    0x046f, 0x046b, 0x046b, 0x046b, 0x046a, 0x046b, 0x046b, 0x0474,
    0x0008, 0x020b, 0x020b, 0x047c, 0x0483, 0x0213, 0x0213, 0x0213,
    0x0213, 0x0213, 0x0487, 0x0008, 0x0008, 0x0008, 0x015d, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0089, 0x0089, 0x03e0, 0x0422, 0x0089,
    0x0089, 0x03e0, 0x03e0, 0x03e5, 0x03e0, 0x03e1, 0x03ea, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x048b, 0x03e0,
    0x03e0, 0x03e0, 0x03e0, 0x0423, 0x0008, 0x0008, 0x0008, 0x0493,
    0x0008, 0x0008, 0x0008, 0x0008, 0x03e1, 0x0008, 0x0000, 0x049b,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00f1,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00cd, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00a8, 0x00a5, 0x0461, 0x00aa, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0165, 0x0008, 0x0008, 0x0008,
    0x0008, 0x00aa, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0448,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a9,
    0x021b, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0089,
    0x008a, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0131, 0x00ce,
    0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0089, 0x04a3,
    0x00cb, 0x00eb, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00a5, 0x0008, 0x0008, 0x0008, 0x00ce, 0x0089, 0x00a3, 0x0008,
    0x01a4, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00ca, 0x0008,
    0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a0, 0x0089,
    0x04ab, 0x04b2, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00aa, 0x0089, 0x015d, 0x00cc, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00ce, 0x0089, 0x00a5, 0x0008, 0x0008,
    0x00a4, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x019a,
    0x00dc, 0x016c, 0x00ce, 0x0008, 0x04ba, 0x00a3, 0x00a3, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a9, 0x0089, 0x008a,
    0x0008, 0x0008, 0x015d, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a4,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00ce,
    0x01d4, 0x0089, 0x00cd, 0x0008, 0x0008, 0x0447, 0x0008, 0x0008,
    0x0008, 0x0008, 0x00cd, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x00a0, 0x0089, 0x0008, 0x0008, 0x0008, 0x00a9,
    0x01d2, 0x00a4, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00aa,
    0x0089, 0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00af, 0x04bd, 0x04c3, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x00ad, 0x00ac, 0x0435, 0x0008, 0x0008, 0x0008,
    0x00ad, 0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a0, 0x04cb,
    0x00ce, 0x0008, 0x00ad, 0x00a4, 0x0008, 0x0008, 0x0008, 0x0008,
    0x04d2, 0x04d8, 0x0089, 0x00a6, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x00ce, 0x008a, 0x0089, 0x0008, 0x0008, 0x00ac, 0x0089,
    0x0089, 0x00ad, 0x008a, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x04e0, 0x04e7, 0x04ee, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00a1, 0x00f9, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x04b0, 0x0008, 0x04f2, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00aa, 0x0197, 0x00a5, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0268, 0x0268, 0x00a7,
    0x0089, 0x01d4, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x008a, 0x0008, 0x00ce, 0x00ad, 0x0089, 0x0089, 0x0089, 0x0089,
    0x0089, 0x00ce, 0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x04fa, 0x0008, 0x00a6, 0x0008, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03e0, 0x03e0, 0x03e0, 0x0008, 0x03e0, 0x03e0, 0x03f2, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x03e0, 0x0423, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x03e4, 0x0502, 0x03e0, 0x03e0,
    0x03e0, 0x03e0, 0x0419, 0x0008, 0x0509, 0x0008, 0x0008, 0x0511,
    0x0008, 0x03ee, 0x0008, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03e0, 0x03e0, 0x03ea, 0x0008, 0x0008, 0x0008, 0x01a4, 0x0519,
    0x0008, 0x0008, 0x0008, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089,
    0x01d4, 0x0089, 0x0089, 0x008a, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00a9, 0x021f, 0x0521, 0x0526, 0x052b,
    0x00a4, 0x0008, 0x0008, 0x0008, 0x021b, 0x0008, 0x0008, 0x016d,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0089,
    0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x008a, 0x00a0, 0x0089,
    0x0089, 0x0089, 0x0089, 0x0089, 0x00a3, 0x00f1, 0x0008, 0x043a,
    0x0008, 0x0008, 0x00a0, 0x00ad, 0x0089, 0x0008, 0x0008, 0x008a,
    0x0089, 0x0089, 0x052d, 0x00b3, 0x00a5, 0x0008, 0x0008, 0x00ce,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x015d, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00aa, 0x0008, 0x0008, 0x008a,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00aa, 0x00a5, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0535, 0x0330, 0x0330,
    0x0330, 0x0330, 0x0330, 0x0330, 0x0330, 0x0330, 0x0331, 0x0330,
    0x0330, 0x0330, 0x0330, 0x0330, 0x0330, 0x0092, 0x053d, 0x0092,
    0x0092, 0x0092, 0x0545, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092,
    0x054d, 0x0555, 0x0557, 0x0092, 0x055f, 0x0566, 0x056b, 0x0092,
    0x056e, 0x0330, 0x0330, 0x0330, 0x0330, 0x0573, 0x0579, 0x0579,
    0x0579, 0x0581, 0x0330, 0x03e0, 0x0589, 0x03e0, 0x0403, 0x058f,
    0x0594, 0x03e0, 0x0597, 0x059f, 0x0330, 0x033a, 0x0330, 0x0330,
    0x0330, 0x0338, 0x0338, 0x0338, 0x0338, 0x05a0, 0x0333, 0x05a8,
    0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x05a9,
    0x0338, 0x0338, 0x033c, 0x0330, 0x0338, 0x0338, 0x0338, 0x0338,
    0x05af, 0x033c, 0x0330, 0x0338, 0x0338, 0x05b6, 0x05be, 0x0338,
    0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0339, 0x05c6,
    0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338,
    0x05c9, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338,
    0x05d0, 0x0287, 0x05d8, 0x0338, 0x0338, 0x0338, 0x0330, 0x0330,
    0x0358, 0x0330, 0x0330, 0x059a, 0x0330, 0x0535, 0x0330, 0x0330,
    0x0330, 0x0330, 0x0330, 0x0330, 0x0330, 0x0335, 0x0338, 0x0338,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x033a, 0x0535,
    0x05cb, 0x0334, 0x0330, 0x059c, 0x0334, 0x033b, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x05e0, 0x0330, 0x0008, 0x0008,
    0x03cc, 0x0330, 0x0338, 0x033c, 0x05a0, 0x0330, 0x0008, 0x05e0,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0330, 0x0008,
    0x05e2, 0x0008, 0x0008, 0x0008, 0x0008, 0x0330, 0x0008, 0x0008,
    0x0008, 0x0287, 0x0330, 0x0330, 0x0008, 0x05ea, 0x0338, 0x0338,
    0x0338, 0x0338, 0x0338, 0x05ef, 0x05f3, 0x0338, 0x0338, 0x0338,
    0x0338, 0x0338, 0x0338, 0x0338, 0x0330, 0x0330, 0x0330, 0x0330,
    0x0330, 0x0330, 0x0338, 0x033b, 0x0338, 0x05a0, 0x0338, 0x0338,
    0x0338, 0x0338, 0x0338, 0x05a8, 0x033a, 0x0332, 0x0338, 0x033c,
    0x0338, 0x05a0, 0x0338, 0x05a0, 0x0330, 0x0330, 0x0330, 0x0330,
    0x0330, 0x0330, 0x0330, 0x034f, 0x05fb, 0x0000, 0x0000, 0x0000,
    0x0089, 0x0089, 0x0089, 0x0089, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0089, 0x0089, 0x0089, 0x0089,
    0x0089, 0x0089, 0x0000, 0x0000, 0x0092, 0x0092, 0x0092, 0x0092,
    0x0092, 0x0092, 0x0092, 0x0603,
};
static constexpr uint8_t s_stage3[] = {
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x41, 0x40, 0xc0, 0x40, 0x40, 0xc0, 0x40, 0x40,
    0xc0, 0x4c, 0xc0, 0x40, 0x40, 0x01, 0xcc, 0x40,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0xc0,
    0xc0, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0,
    0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0xc0,
    0xc0, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0x40, 0xc0,
    0xc0, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0x40,
    0x40, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0x40, 0xc0,
    0x40, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x40,
    0xc0, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0,
    0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40,
    0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0x40,
    0xc0, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02,
    0x40, 0x02, 0x02, 0x40, 0x02, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x40, 0x40, 0x02, 0x02, 0x02,
    0x40, 0x01, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x04, 0x40, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x04, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40,
    0x40, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40,
    0x40, 0x04, 0x04, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x02, 0x02, 0x04, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4b, 0x4b,
    0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x02, 0x02,
    0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0a,
    0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40,
    0x40, 0x40, 0x4b, 0x40, 0x4b, 0x4b, 0x4b, 0x4b,
    0x4b, 0x4b, 0x40, 0x4b, 0x40, 0x40, 0x40, 0x4b,
    0x4b, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x40,
    0x40, 0x02, 0x02, 0x0a, 0x40, 0x40, 0x40, 0x40,
    0x4b, 0x4b, 0x40, 0x4b, 0x4b, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x02,
    0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40,
    0x4b, 0x40, 0x4b, 0x4b, 0x40, 0x4b, 0x4b, 0x4b,
    0x02, 0x02, 0x40, 0x02, 0x02, 0x0a, 0x40, 0x40,
    0x4b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
    0x4b, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40,
    0x02, 0x02, 0x02, 0x0a, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x02, 0x02, 0x40, 0x4b, 0x4b, 0x4b, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02,
    0x02, 0x0a, 0x44, 0x40, 0x40, 0x02, 0x40, 0x40,
    0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
    0x02, 0x40, 0x42, 0x02, 0x02, 0x02, 0x02, 0x40,
    0x40, 0x40, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02,
    0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x02, 0x00,
    0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x40, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00,
    0x02, 0x40, 0x40, 0x85, 0x85, 0x85, 0x85, 0x85,
    0x85, 0x85, 0x85, 0x46, 0x46, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47,
    0x47, 0x47, 0x47, 0x40, 0x40, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x01,
    0x02, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x02,
    0x40, 0x40, 0x40, 0x01, 0x02, 0x0d, 0x01, 0x01,
    0xc0, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x40,
    0x40, 0xc0, 0xc0, 0x40, 0x40, 0x41, 0x41, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x40, 0xc0, 0x40, 0xc0,
    0xc0, 0x40, 0xc0, 0x40, 0x40, 0x40, 0xc0, 0x4c,
    0x40, 0xc0, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x01, 0x01, 0x01, 0x01, 0x01, 0x41,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0x40,
    0xc0, 0xcc, 0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0,
    0xc0, 0xc0, 0xc0, 0xcc, 0xcc, 0xcc, 0xcc, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x40,
    0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0x40,
    0x40, 0x40, 0xc0, 0x40, 0x40, 0xc0, 0x40, 0x40,
    0x40, 0xc0, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0x40, 0xc0, 0x40, 0x40, 0x40, 0xc0, 0x40,
    0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0xc0, 0xc0,
    0xc0, 0xc0, 0x40, 0x40, 0x8c, 0x8c, 0x40, 0x40,
    0x40, 0x40, 0x4c, 0x80, 0x80, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x4c, 0x40, 0x8c, 0x8c, 0x8c, 0x8c,
    0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x8c, 0x40,
    0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x40, 0x40,
    0x40, 0x40, 0x40, 0xc0, 0xc0, 0xcc, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0x4c, 0x4c, 0x40, 0x40, 0x40,
    0x40, 0xc0, 0xc0, 0x40, 0x40, 0xcc, 0xc0, 0x40,
    0x40, 0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0xc0,
    0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0x40, 0x4c,
    0x4c, 0x8c, 0x8c, 0x40, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0xcc, 0xc0, 0x4c, 0xcc, 0x4c, 0x4c, 0x4c,
    0x4c, 0xcc, 0xcc, 0x4c, 0x4c, 0x4c, 0x40, 0x8c,
    0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0xcc, 0x4c, 0xcc,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
    0x4c, 0x4c, 0x4c, 0x4c, 0xcc, 0xcc, 0x4c, 0xcc,
    0xcc, 0xcc, 0x4c, 0xcc, 0xcc, 0x4c, 0xcc, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x4c,
    0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0xcc, 0xcc, 0x4c, 0x4c, 0x8c, 0x8c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0xcc, 0xcc,
    0xcc, 0xcc, 0xcc, 0xcc, 0x8c, 0xcc, 0xcc, 0xcc,
    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x8c, 0x8c, 0xcc,
    0x8c, 0xcc, 0xcc, 0x8c, 0xcc, 0xcc, 0x8c, 0xcc,
    0xcc, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x40,
    0x40, 0x4c, 0x4c, 0x4c, 0x40, 0x4c, 0x40, 0x4c,
    0x40, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x4c, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x40,
    0x40, 0x8c, 0x40, 0x8c, 0x40, 0x40, 0x40, 0x8c,
    0x8c, 0x8c, 0x40, 0x8c, 0x40, 0x40, 0x40, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x8c, 0x8c, 0x8c, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x8c, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x8c,
    0x8c, 0x40, 0x40, 0x40, 0x40, 0x8c, 0xc0, 0xc0,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40,
    0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x40, 0x40, 0x80, 0x80, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x8c, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x8c, 0x80, 0x40, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x40, 0x02, 0x02, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x80, 0x8c, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x40, 0x40, 0x02, 0x40, 0x40,
    0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40,
    0x40, 0x40, 0x85, 0x85, 0x85, 0x85, 0x85, 0x40,
    0x40, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40,
    0x00, 0x02, 0x00, 0x40, 0x40, 0x02, 0x40, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02,
    0x40, 0x40, 0x88, 0x89, 0x89, 0x89, 0x89, 0x89,
    0x89, 0x89, 0x89, 0x88, 0x89, 0x89, 0x89, 0x89,
    0x40, 0x40, 0x40, 0x40, 0x46, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x40, 0x40, 0x40, 0x47, 0x47,
    0x47, 0x47, 0x47, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x01, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x42, 0x42, 0x41, 0x01, 0x01, 0x01, 0x40,
    0xc0, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40,
    0x04, 0x40, 0x40, 0x02, 0x40, 0x44, 0x44, 0x40,
    0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40,
    0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40,
    0x02, 0x02, 0x02, 0x02, 0x44, 0x02, 0x02, 0x40,
    0x40, 0x40, 0x40, 0x02, 0x02, 0x44, 0x02, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x44, 0x44,
    0x44, 0x44, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
    0x40, 0x02, 0x40, 0x02, 0x02, 0x40, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x44, 0x02, 0x40, 0x40,
    0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x02, 0x40,
    0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x40, 0x80,
    0x80, 0x40, 0x40, 0x80, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x80, 0x80, 0x80, 0x40, 0x40, 0x80, 0x40,
    0x40, 0x01, 0x01, 0x01, 0x01, 0x40, 0x40, 0x40,
    0x40, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x4c, 0x4c, 0x4c,
    0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0xc0, 0xc0, 0xc0,
    0x40, 0x40, 0x4c, 0x4c, 0x4c, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0x40, 0x4c, 0xc0, 0xc0, 0x40,
    0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0xcc, 0xcc, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xcc, 0xcc, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x8c, 0xc0, 0x8c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
    0x43, 0x80, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x80, 0x80, 0x8c, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x80,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c,
    0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x8c,
    0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c,
    0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c,
    0x8c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x8c, 0x4c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x40, 0x40,
    0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c,
    0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x8c, 0x8c,
    0x8c, 0x8c, 0x40, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
    0x8c, 0x40, 0x8c, 0x41, 0x01, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0x40, 0x40,
};
static constexpr uint32_t s_joinRules[2][16] = {
    {
        0b00000011110011111111111111001111,
        0b00001111111111111111111111111111,
        0b00000011110011111111111111001111,
        0b00000011110011111111111101001111,
        0b00000000000000000000000000001100,
        0b00000011110000001100001111001111,
        0b00000011110011110000111111001111,
        0b00000011110011110011111111001111,
        0b00000011110011110000111111001111,
        0b00000011110011110011111111001111,
        0b00000011000011111111111111001111,
        0b00000011110011111111111111001111,
        0b00000011110011111111111111001111,
        0b00000000110011111111111111001111,
        0b00000000000000000000000000000000,
        0b00000000000000000000000000000000,
    },
    {
        0b00000011110011111111111111001111,
        0b00001111111111111111111111111111,
        0b00000011110011111111111111001111,
        0b00000011110011111111111111001111,
        0b00000000000000000000000000001100,
        0b00000011110000001100001111001111,
        0b00000011110011110000111111001111,
        0b00000011110011110011111111001111,
        0b00000011110011110000111111001111,
        0b00000011110011110011111111001111,
        0b00000011000011111111111111001111,
        0b00000011110011111111111111001111,
        0b00000011110011111111111111001111,
        0b00000000110011111111111111001111,
        0b00000000000000000000000000000000,
        0b00000000000000000000000000000000,
    },
};
constexpr int ucdLookup(const char32_t cp) noexcept
{
    const auto s0 = s_stage0[cp >> 11];
    const auto s1 = s_stage1[s0 + ((cp >> 6) & 31)];
    const auto s2 = s_stage2[s1 + ((cp >> 3) & 7)];
    const auto s3 = s_stage3[s2 + ((cp >> 0) & 7)];
    return s3;
}
constexpr int ucdGraphemeJoins(const int state, const int lead, const int trail) noexcept
{
    const auto l = lead & 15;
    const auto t = trail & 15;
    return (s_joinRules[state][l] >> (t * 2)) & 3;
}
constexpr bool ucdGraphemeDone(const int state) noexcept
{
    return state == 3;
}
constexpr int ucdToCharacterWidth(const int val) noexcept
{
    return val >> 6;
}
// clang-format on

// Decodes the next codepoint from the given UTF-16 string.
// Returns the start of the next codepoint. Assumes `it < end`.
[[msvc::forceinline]] constexpr const wchar_t* utf16NextOrFFFD(const wchar_t* it, const wchar_t* end, char32_t& out)
{
    __assume(it != nullptr);
    __assume(end != nullptr);

    char32_t c = *it++;

    // Is any surrogate?
    if ((c & 0xF800) == 0xD800)
    {
        const char32_t c1 = c;
        c = 0xfffd;

        // Is leading surrogate and not at end?
        if ((c1 & 0x400) == 0 && it != end)
        {
            const char32_t c2 = *it;
            // Is also trailing surrogate!
            if ((c2 & 0xFC00) == 0xDC00)
            {
                c = (c1 << 10) - 0x35FDC00 + c2;
                ++it;
            }
        }
    }

    out = c;
    return it;
}

// Decodes the preceding codepoint from the given UTF-16 string.
// Returns the start of the preceding codepoint. Assumes `it > beg`.
[[msvc::forceinline]] constexpr const wchar_t* utf16PrevOrFFFD(const wchar_t* it, const wchar_t* beg, char32_t& out)
{
    __assume(it != nullptr);
    __assume(beg != nullptr);

    char32_t c = *--it;

    // Is any surrogate?
    if ((c & 0xF800) == 0xD800)
    {
        const char32_t c2 = c;
        c = 0xfffd;

        // Is trailing surrogate and not at begin?
        if ((c2 & 0x400) != 0 && it != beg)
        {
            const char32_t c1 = it[-1];
            // Is also leading surrogate!
            if ((c1 & 0xFC00) == 0xD800)
            {
                c = (c1 << 10) - 0x35FDC00 + c2;
                --it;
            }
        }
    }

    out = c;
    return it;
}

// Returns `reset` if `ptr` is outside the range [beg, end). Otherwise, it returns `ptr` unmodified.
constexpr const wchar_t* resetIfOutOfRange(const wchar_t* beg, const wchar_t* end, const wchar_t* reset, const wchar_t* ptr)
{
    auto ret = ptr;
    // This uses individual if-assignments to get the compiler to emit conditional moves.
    if (ptr < beg)
    {
        ret = reset;
    }
    if (ptr > end)
    {
        ret = reset;
    }
    return ret;
}

static CodepointWidthDetector s_codepointWidthDetector;

CodepointWidthDetector& CodepointWidthDetector::Singleton() noexcept
{
    return s_codepointWidthDetector;
}

bool CodepointWidthDetector::GraphemeNext(GraphemeState& s, const std::wstring_view& str) noexcept
{
    if (_mode == TextMeasurementMode::Graphemes)
    {
        return _graphemeNext(s, str);
    }
    if (_mode == TextMeasurementMode::Wcswidth)
    {
        return _graphemeNextWcswidth(s, str);
    }
    return _graphemeNextConsole(s, str);
}

bool CodepointWidthDetector::GraphemePrev(GraphemeState& s, const std::wstring_view& str) noexcept
{
    if (_mode == TextMeasurementMode::Graphemes)
    {
        return _graphemePrev(s, str);
    }
    if (_mode == TextMeasurementMode::Wcswidth)
    {
        return _graphemePrevWcswidth(s, str);
    }
    return _graphemePrevConsole(s, str);
}

// Parses the next grapheme cluster from the given string. The algorithm largely follows "UAX #29: Unicode Text Segmentation",
// but takes some mild liberties. Returns false if the end of the string was reached. Updates `s` with the cluster.
bool CodepointWidthDetector::_graphemeNext(GraphemeState& s, const std::wstring_view& str) const noexcept
{
    const auto beg = str.data();
    const auto end = beg + str.size();
    auto clusterBeg = s.beg + s.len;
    auto width = s.width;
    auto state = s._state;
    auto lead = s._last;

    // If it's a new string argument, we'll restart at the new string's beginning.
    clusterBeg = resetIfOutOfRange(beg, end, beg, clusterBeg);

    auto clusterEnd = clusterBeg;

    // Skip if we're already at the end.
    if (clusterEnd < end)
    {
        char32_t cp;

        // If a previous parsing of a grapheme cluster got interrupted because we reached the end of the string,
        // we'll have stored the parser state in `s._state` so that we can continue parsing within the new string.
        // The problem is that a `state` of zero is also a valid state parameter for `ucdGraphemeJoins`.
        // Thus, we're storing `s._state` bit-flipped so that we can differentiate between it being unset (0) and
        // storing a previous state of 0 (0xffff...).
        const auto gotState = state != 0;
        state = ~state;
        if (gotState)
        {
            goto fetchNext;
        }

        clusterEnd = utf16NextOrFFFD(clusterEnd, end, cp);
        lead = ucdLookup(cp);
        width = 0;
        state = 0;

        for (;;)
        {
            {
                auto w = ucdToCharacterWidth(lead);
                if (w == 3)
                {
                    w = _ambiguousWidth;
                }

                // U+FE0F Variation Selector-16 is used to turn unqualified Emojis into qualified ones.
                // By convention, this turns them from being ambiguous width (= narrow) into wide ones.
                // We achieve this here by explicitly giving this codepoint a wide width.
                // Later down below we'll clamp width back to <= 2.
                if (cp == 0xFE0F)
                {
                    w = 2;
                }

                width += w;
            }

            // If we're at the end of the string, we'll break out of the loop, but leave
            // `state` and `lead` as-is, so that we can continue parsing in the next string.
            if (clusterEnd >= end)
            {
                break;
            }

        fetchNext:
            const auto clusterEndNext = utf16NextOrFFFD(clusterEnd, end, cp);
            const auto trail = ucdLookup(cp);

            state = ucdGraphemeJoins(state, lead, trail);
            if (ucdGraphemeDone(state))
            {
                // We'll later do `state = ~state` which will result in `state == 0`.
                state = ~0;
                lead = 0;
                break;
            }

            clusterEnd = clusterEndNext;
            lead = trail;
        }

        state = ~state;
        width = width > 2 ? 2 : width;

        s.beg = clusterBeg;
        s.len = static_cast<int>(clusterEnd - clusterBeg);
        s.width = width;
        s._state = state;
        s._last = lead;
    }

    return clusterEnd < end;
}

// Parses the preceding grapheme cluster from the given string. The algorithm largely follows "UAX #29: Unicode Text Segmentation",
// but takes some mild liberties. Returns false if the end of the string was reached. Updates `s` with the cluster.
// This code is identical to _graphemeNext() but with the order of operations reversed since we're iterating backwards.
bool CodepointWidthDetector::_graphemePrev(GraphemeState& s, const std::wstring_view& str) const noexcept
{
    const auto beg = str.data();
    const auto end = beg + str.size();
    auto clusterEnd = s.beg;
    auto width = s.width;
    auto state = s._state;
    auto trail = s._last;

    // If it's a new string argument, we'll restart at the new string's beginning.
    clusterEnd = resetIfOutOfRange(beg, end, end, clusterEnd);

    auto clusterBeg = clusterEnd;

    // Skip if we're already at the end.
    if (clusterEnd > beg)
    {
        char32_t cp;

        // If a previous parsing of a grapheme cluster got interrupted because we reached the end of the string,
        // we'll have stored the parser state in `s._state` so that we can continue parsing within the new string.
        // The problem is that a `state` of zero is also a valid state parameter for `ucdGraphemeJoins`.
        // Thus, we're storing `s._state` bit-flipped so that we can differentiate between it being unset (0) and
        // storing a previous state of 0 (0xffff...).
        const auto gotState = state != 0;
        state = ~state;
        if (gotState)
        {
            goto fetchNext;
        }

        clusterBeg = utf16PrevOrFFFD(clusterBeg, beg, cp);
        trail = ucdLookup(cp);
        width = 0;
        state = 0;

        for (;;)
        {
            {
                auto w = ucdToCharacterWidth(trail);
                if (w == 3)
                {
                    w = _ambiguousWidth;
                }

                // U+FE0F Variation Selector-16 is used to turn unqualified Emojis into qualified ones.
                // By convention, this turns them from being ambiguous width (= narrow) into wide ones.
                // We achieve this here by explicitly giving this codepoint a wide width.
                // Later down below we'll clamp width back to <= 2.
                if (cp == 0xFE0F)
                {
                    w = 2;
                }

                width += w;
            }

            // If we're at the end of the string, we'll break out of the loop, but leave
            // `state` and `lead` as-is, so that we can continue parsing in the next string.
            if (clusterBeg <= beg)
            {
                break;
            }

        fetchNext:
            const auto clusterBegNext = utf16PrevOrFFFD(clusterBeg, beg, cp);
            const auto lead = ucdLookup(cp);

            state = ucdGraphemeJoins(state, lead, trail);
            if (ucdGraphemeDone(state))
            {
                // We'll later do `state = ~state` which will result in `state == 0`.
                state = ~0;
                trail = 0;
                break;
            }

            clusterBeg = clusterBegNext;
            trail = lead;
        }

        state = ~state;
        width = width > 2 ? 2 : width;

        s.beg = clusterBeg;
        s.len = static_cast<int>(clusterEnd - clusterBeg);
        s.width = width;
        s._state = state;
        s._last = trail;
    }

    return clusterBeg > beg;
}

// Implements a clustering algorithm that behaves similar to terminals and applications based on `wcswidth`.
// Such terminals have no actual notion of graphemes or joining characters, but do know zero-width characters.
// During cursor navigation they'll skip over such zero-width characters to reach the target column.
// In effect this means, that a non-zero-width character gets clustered with any number of following zero-width characters.
bool CodepointWidthDetector::_graphemeNextWcswidth(GraphemeState& s, const std::wstring_view& str) const noexcept
{
    const auto beg = str.data();
    const auto end = beg + str.size();
    auto clusterBeg = s.beg + s.len;
    auto width = s.width;
    auto state = s._state;

    // If it's a new string argument, we'll restart at the new string's beginning.
    clusterBeg = resetIfOutOfRange(beg, end, beg, clusterBeg);

    if (clusterBeg >= end)
    {
        return false;
    }

    auto clusterEnd = clusterBeg;

    // Normally we could just append any zero-width characters to the current cluster,
    // but theoretically we could have a zero-width character itself as the lead character.
    // Because of that we don't use `s.width` to track the state but rather flag
    // whether we've encountered our "lead" character in `s._state` (1 if we had one).
    if (state == 0)
    {
        width = 0;
    }

    for (;;)
    {
        char32_t cp;
        const auto clusterEndNext = utf16NextOrFFFD(clusterEnd, end, cp);
        const auto val = ucdLookup(cp);

        auto w = ucdToCharacterWidth(val);
        if (w == 3)
        {
            w = _ambiguousWidth;
        }

        if (state != 0 && w != 0)
        {
            state = 0;
            break;
        }

        width += w;
        state = 1;
        clusterEnd = clusterEndNext;

        if (clusterEnd >= end)
        {
            break;
        }
    }

    s.beg = clusterBeg;
    s.len = static_cast<int>(clusterEnd - clusterBeg);
    s.width = width;
    s._state = state;
    return clusterEnd < end;
}

// Implements a clustering algorithm that behaves similar to terminals and applications based on `wcswidth`.
// Such terminals have no actual notion of graphemes or joining characters, but do know zero-width characters.
// During cursor navigation they'll skip over such zero-width characters to reach the target column.
// In effect this means, that a non-zero-width character gets clustered with any number of following zero-width characters.
bool CodepointWidthDetector::_graphemePrevWcswidth(GraphemeState& s, const std::wstring_view& str) const noexcept
{
    const auto beg = str.data();
    const auto end = beg + str.size();
    auto clusterEnd = s.beg;

    // If it's a new string argument, we'll restart at the new string's beginning.
    clusterEnd = resetIfOutOfRange(beg, end, end, clusterEnd);

    if (clusterEnd <= beg)
    {
        return false;
    }

    auto clusterBeg = clusterEnd;
    auto width = s.width;
    int delayedCompletion = 0;

    // In order to conform to the behavior of _graphemePrev(), we need to pretend as if we don't know
    // whether the cluster is complete yet (with graphemes there may be prepended concatenation marks).
    // As such, we flag `delayedCompletion` to true which gets stored as `s._state = 1` and return false.
    // Then, when we get called again with the next input string, we'll finally return false with a `s.len` of 0.
    if (s._state == 0)
    {
        width = 0;

        for (;;)
        {
            char32_t cp;
            clusterBeg = utf16PrevOrFFFD(clusterBeg, beg, cp);
            const auto val = ucdLookup(cp);

            auto w = ucdToCharacterWidth(val);
            if (w == 3)
            {
                w = _ambiguousWidth;
            }

            width += w;

            const auto hasWidth = width != 0;
            const auto atEnd = clusterBeg <= beg;

            if (hasWidth || atEnd)
            {
                delayedCompletion = hasWidth && atEnd;
                break;
            }
        }
    }

    s.beg = clusterBeg;
    s.len = static_cast<int>(clusterEnd - clusterBeg);
    s.width = width;
    s._state = delayedCompletion;
    return clusterBeg > beg;
}

// Implements a clustering algorithm that behaves similar to the old conhost.
// It even asks the text renderer how wide ambiguous width characters are instead of defaulting to 1 (or 2).
bool CodepointWidthDetector::_graphemeNextConsole(GraphemeState& s, const std::wstring_view& str) noexcept
{
    const auto beg = str.data();
    const auto end = beg + str.size();
    auto clusterBeg = s.beg + s.len;

    // If it's a new string argument, we'll restart at the new string's beginning.
    clusterBeg = resetIfOutOfRange(beg, end, beg, clusterBeg);

    if (clusterBeg >= end)
    {
        return false;
    }

    auto clusterEnd = clusterBeg;
    auto width = s.width;
    int delayedCompletion = 0;

    // In order to conform to the behavior of _graphemeNext(), we need to pretend as if we don't know
    // whether the cluster is complete yet (with graphemes there may be combining marks, etc.).
    // As such, we flag `delayedCompletion` to true which gets stored as `s._state = 1` and return false.
    // Then, when we get called again with the next input string, we'll finally return false with a `s.len` of 0.
    if (s._state == 0)
    {
        char32_t cp;
        clusterEnd = utf16NextOrFFFD(clusterEnd, end, cp);

        const auto val = ucdLookup(cp);
        width = ucdToCharacterWidth(val);
        if (width == 3)
        {
            width = _checkFallbackViaCache(cp);
        }

        delayedCompletion = clusterEnd >= end;
    }

    s.beg = clusterBeg;
    s.len = static_cast<int>(clusterEnd - clusterBeg);
    s.width = width;
    s._state = delayedCompletion;
    return delayedCompletion == 0;
}

// Implements a clustering algorithm that behaves similar to the old conhost.
// It even asks the text renderer how wide ambiguous width characters are instead of defaulting to 1 (or 2).
bool CodepointWidthDetector::_graphemePrevConsole(GraphemeState& s, const std::wstring_view& str) noexcept
{
    const auto beg = str.data();
    const auto end = beg + str.size();
    auto clusterEnd = s.beg;

    // If it's a new string argument, we'll restart at the new string's beginning.
    clusterEnd = resetIfOutOfRange(beg, end, end, clusterEnd);

    if (clusterEnd <= beg)
    {
        return false;
    }

    auto clusterBeg = clusterEnd;
    auto width = s.width;
    int delayedCompletion = 0;

    // In order to conform to the behavior of _graphemePrev(), we need to pretend as if we don't know
    // whether the cluster is complete yet (with graphemes there may be prepended concatenation marks).
    // As such, we flag `delayedCompletion` to true which gets stored as `s._state = 1` and return false.
    // Then, when we get called again with the next input string, we'll finally return false with a `s.len` of 0.
    if (s._state == 0)
    {
        char32_t cp;
        clusterBeg = utf16PrevOrFFFD(clusterEnd, beg, cp);

        const auto val = ucdLookup(cp);
        width = ucdToCharacterWidth(val);
        if (width == 3)
        {
            width = _checkFallbackViaCache(cp);
        }

        delayedCompletion = clusterBeg <= beg;
    }

    s.beg = clusterBeg;
    s.len = static_cast<int>(clusterEnd - clusterBeg);
    s.width = width;
    s._state = delayedCompletion;
    return delayedCompletion == 0;
}

// Call the function specified via SetFallbackMethod() to turn ambiguous (width = 3) into narrow/wide.
// Caches the results in _fallbackCache.
int CodepointWidthDetector::_checkFallbackViaCache(const char32_t codepoint) noexcept
try
{
    // Ambiguous glyphs are considered narrow by default. See microsoft/terminal#2066 for more info.
    if (!_pfnFallbackMethod)
    {
        return 1;
    }

    if (const auto it = _fallbackCache.find(codepoint); it != _fallbackCache.end())
    {
        return it->second;
    }

    wchar_t buf[2];
    size_t len;
    if (codepoint <= 0xffff)
    {
        buf[0] = static_cast<wchar_t>(codepoint);
        len = 1;
    }
    else
    {
        buf[0] = static_cast<wchar_t>((codepoint >> 10) + 0xD7C0);
        buf[1] = static_cast<wchar_t>((codepoint & 0x3ff) | 0xDC00);
        len = 2;
    }

    const int width = _pfnFallbackMethod({ &buf[0], len }) ? 2 : 1;
    _fallbackCache.insert_or_assign(codepoint, width);
    return width;
}
catch (...)
{
    LOG_CAUGHT_EXCEPTION();
    return 1;
}

TextMeasurementMode CodepointWidthDetector::GetMode() const noexcept
{
    return _mode;
}

// Method Description:
// - Sets a function that should be used as the fallback mechanism for
//      determining a particular glyph's width, should the glyph be an ambiguous
//      width.
//   A Terminal could hook in a Renderer's IsGlyphWideByFont method as the
//      fallback to ask the renderer for the glyph's width (for example).
// Arguments:
// - pfnFallback - the function to use as the fallback method.
// Return Value:
// - <none>
void CodepointWidthDetector::SetFallbackMethod(std::function<bool(const std::wstring_view&)> pfnFallback) noexcept
{
    _pfnFallbackMethod = std::move(pfnFallback);
}

void CodepointWidthDetector::Reset(const TextMeasurementMode mode) noexcept
{
    _mode = mode;
    _fallbackCache.clear();
}
